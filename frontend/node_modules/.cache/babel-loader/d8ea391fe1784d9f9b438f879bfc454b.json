{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amank\\\\Desktop\\\\Real_Project_file\\\\ges\\\\src\\\\Components\\\\Text_Slider\\\\Slider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useInterval } from \"react-use\";\nimport styled, { keyframes } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Slider() {\n  _s();\n\n  const quotes = \"\";\n  const quotes1 = \"This is good\".split(\",\");\n  const quotes2 = \"Aman Khadka\".split(\",\");\n  const quotes3 = \"Finally I'm learning programming\".split(\",\"); // const idioms = quotes.split(\"\");\n\n  const [count, setCount] = useState(0);\n  const [play, setPlay] = useState(false);\n  const [data, setData] = useState(quotes0);\n  useInterval(() => {\n    setCount(count + 1);\n    console.log(count);\n\n    if (count === 0) {\n      setData(quotes1);\n    }\n\n    if (count === 1) {\n      setData(quotes2);\n    }\n\n    if (count === 2) {\n      setCount(0);\n      setData(quotes3);\n    }\n  }, 10000);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: data.map((items, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: items\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Slider, \"8nX0znjqBhXG2C4cjIXdRq+2ewg=\", false, function () {\n  return [useInterval];\n});\n\n_c = Slider;\nexport default Slider;\nconst animation = keyframes`\n0%{ opacity: 0;} \n25%{opacity:1; }\n75%{opacity:1; }\n100%{opacity: 0;} \n`;\nconst Wrapper = styled.span`\n  display: inline-block;\n  span {\n    display: inline-block;\n    opacity: 0;\n    animation-name: ${animation};\n    animation-duration: 10s;\n    animation-iteration-count: infinite;\n  }\n`;\n_c2 = Wrapper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Slider\");\n$RefreshReg$(_c2, \"Wrapper\");","map":{"version":3,"sources":["C:/Users/amank/Desktop/Real_Project_file/ges/src/Components/Text_Slider/Slider.js"],"names":["React","useState","useEffect","useInterval","styled","keyframes","Slider","quotes","quotes1","split","quotes2","quotes3","count","setCount","play","setPlay","data","setData","quotes0","console","log","map","items","index","animation","Wrapper","span"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,MAAP,IAAiBC,SAAjB,QAAkC,mBAAlC;;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,OAAO,GAAG,eAAeC,KAAf,CAAqB,GAArB,CAAhB;AACA,QAAMC,OAAO,GAAG,cAAcD,KAAd,CAAoB,GAApB,CAAhB;AACA,QAAME,OAAO,GAAG,mCAAmCF,KAAnC,CAAyC,GAAzC,CAAhB,CAJgB,CAMhB;;AAEA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAACiB,OAAD,CAAhC;AAEAf,EAAAA,WAAW,CAAC,MAAM;AAChBU,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;;AAEA,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACfK,MAAAA,OAAO,CAACT,OAAD,CAAP;AACD;;AACD,QAAII,KAAK,KAAK,CAAd,EAAiB;AACfK,MAAAA,OAAO,CAACP,OAAD,CAAP;AACD;;AACD,QAAIE,KAAK,KAAK,CAAd,EAAiB;AACfC,MAAAA,QAAQ,CAAC,CAAD,CAAR;AACAI,MAAAA,OAAO,CAACN,OAAD,CAAP;AACD;AACF,GAdU,EAcR,KAdQ,CAAX;AAgBA,sBACE;AAAA,2BACE,QAAC,OAAD;AAAA,gBACGK,IAAI,CAACK,GAAL,CAAS,CAACC,KAAD,EAAQC,KAAR,kBACR;AAAA,kBAAmBD;AAAnB,SAAWC,KAAX;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AASD;;GArCQjB,M;UAYPH,W;;;KAZOG,M;AAuCT,eAAeA,MAAf;AAEA,MAAMkB,SAAS,GAAGnB,SAAU;AAC5B;AACA;AACA;AACA;AACA,CALA;AAOA,MAAMoB,OAAO,GAAGrB,MAAM,CAACsB,IAAK;AAC5B;AACA;AACA;AACA;AACA,sBAAsBF,SAAU;AAChC;AACA;AACA;AACA,CATA;MAAMC,O","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useInterval } from \"react-use\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nfunction Slider() {\r\n  const quotes = \"\";\r\n  const quotes1 = \"This is good\".split(\",\");\r\n  const quotes2 = \"Aman Khadka\".split(\",\");\r\n  const quotes3 = \"Finally I'm learning programming\".split(\",\");\r\n\r\n  // const idioms = quotes.split(\"\");\r\n\r\n  const [count, setCount] = useState(0);\r\n  const [play, setPlay] = useState(false);\r\n  const [data, setData] = useState(quotes0);\r\n\r\n  useInterval(() => {\r\n    setCount(count + 1);\r\n    console.log(count);\r\n\r\n    if (count === 0) {\r\n      setData(quotes1);\r\n    }\r\n    if (count === 1) {\r\n      setData(quotes2);\r\n    }\r\n    if (count === 2) {\r\n      setCount(0);\r\n      setData(quotes3);\r\n    }\r\n  }, 10000);\r\n\r\n  return (\r\n    <>\r\n      <Wrapper>\r\n        {data.map((items, index) => (\r\n          <span key={index}>{items}</span>\r\n        ))}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Slider;\r\n\r\nconst animation = keyframes`\r\n0%{ opacity: 0;} \r\n25%{opacity:1; }\r\n75%{opacity:1; }\r\n100%{opacity: 0;} \r\n`;\r\n\r\nconst Wrapper = styled.span`\r\n  display: inline-block;\r\n  span {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation-name: ${animation};\r\n    animation-duration: 10s;\r\n    animation-iteration-count: infinite;\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}