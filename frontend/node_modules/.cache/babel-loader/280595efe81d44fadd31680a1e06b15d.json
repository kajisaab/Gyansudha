{"ast":null,"code":"export function login({\n  event,\n  authData,\n  setauthLoading,\n  setError,\n  setErrormessage\n}) {\n  console.log(\"submit Clicked\");\n  console.log(JSON.stringify(authData.email));\n  console.log(authData.password);\n  setauthLoading(true);\n  fetch(\"http://localhost:8080/auth/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email: authData.email,\n      password: authData.password\n    })\n  }).then(res => {\n    if (res.status === 422) {\n      throw new Error(\"Validation Failed\");\n    }\n\n    if (res.status === 401) {\n      throw new Error(\"A user with this email can't be found\");\n    }\n\n    if (res.status === 402) {\n      throw new Error(\"Wrong Password\");\n    }\n\n    if (res.status !== 200 && res.status !== 201) {\n      console.log(\"Error\");\n      throw new Error(\"Please Check your Credentials !\");\n    }\n\n    return res.json();\n  }).then(resData => {\n    console.log(resData);\n    setauthLoading(false); // (\"token\", resData.token);\n\n    setUserSession(resData.token, resData.userId);\n    const remaininiMillisecond = 60 * 60 * 100;\n    const expriyDate = new Date(new Date().getTime() + remaininiMillisecond);\n    props.history.push(\"/AdminPage\"); // history.push(\"/AdminPage\", token);\n  }).catch(err => {\n    // console.log(err);\n    // console.log(err.response.statusText);\n    // console.log(err);\n    // alert(err.message);\n    setError(true);\n    setauthLoading(false);\n    setErrormessage(err.message);\n    openModel();\n  });\n}","map":{"version":3,"sources":["C:/Users/amank/Desktop/Real_Project_file/ges/frontend/src/api/api.js"],"names":["login","event","authData","setauthLoading","setError","setErrormessage","console","log","JSON","stringify","email","password","fetch","method","headers","body","then","res","status","Error","json","resData","setUserSession","token","userId","remaininiMillisecond","expriyDate","Date","getTime","props","history","push","catch","err","message","openModel"],"mappings":"AAAA,OAAO,SAASA,KAAT,CAAe;AACpBC,EAAAA,KADoB;AAEpBC,EAAAA,QAFoB;AAGpBC,EAAAA,cAHoB;AAIpBC,EAAAA,QAJoB;AAKpBC,EAAAA;AALoB,CAAf,EAMJ;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeP,QAAQ,CAACQ,KAAxB,CAAZ;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACS,QAArB;AACAR,EAAAA,cAAc,CAAC,IAAD,CAAd;AAEAS,EAAAA,KAAK,CAAC,kCAAD,EAAqC;AACxCC,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF+B;AAKxCC,IAAAA,IAAI,EAAEP,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,KAAK,EAAER,QAAQ,CAACQ,KADG;AAEnBC,MAAAA,QAAQ,EAAET,QAAQ,CAACS;AAFA,KAAf;AALkC,GAArC,CAAL,CAUGK,IAVH,CAUSC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,QAAIF,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,QAAIF,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,QAAIF,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5CZ,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,YAAM,IAAIY,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,WAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,GA1BH,EA2BGJ,IA3BH,CA2BSK,OAAD,IAAa;AACjBf,IAAAA,OAAO,CAACC,GAAR,CAAYc,OAAZ;AACAlB,IAAAA,cAAc,CAAC,KAAD,CAAd,CAFiB,CAGjB;;AACAmB,IAAAA,cAAc,CAACD,OAAO,CAACE,KAAT,EAAgBF,OAAO,CAACG,MAAxB,CAAd;AACA,UAAMC,oBAAoB,GAAG,KAAK,EAAL,GAAU,GAAvC;AACA,UAAMC,UAAU,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,oBAAhC,CAAnB;AAEAI,IAAAA,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmB,YAAnB,EARiB,CAUjB;AACD,GAtCH,EAuCGC,KAvCH,CAuCUC,GAAD,IAAS;AACd;AACA;AACA;AACA;AACA7B,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAD,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAE,IAAAA,eAAe,CAAC4B,GAAG,CAACC,OAAL,CAAf;AACAC,IAAAA,SAAS;AACV,GAhDH;AAiDD","sourcesContent":["export function login({\r\n  event,\r\n  authData,\r\n  setauthLoading,\r\n  setError,\r\n  setErrormessage,\r\n}) {\r\n  console.log(\"submit Clicked\");\r\n  console.log(JSON.stringify(authData.email));\r\n  console.log(authData.password);\r\n  setauthLoading(true);\r\n\r\n  fetch(\"http://localhost:8080/auth/login\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      email: authData.email,\r\n      password: authData.password,\r\n    }),\r\n  })\r\n    .then((res) => {\r\n      if (res.status === 422) {\r\n        throw new Error(\"Validation Failed\");\r\n      }\r\n      if (res.status === 401) {\r\n        throw new Error(\"A user with this email can't be found\");\r\n      }\r\n      if (res.status === 402) {\r\n        throw new Error(\"Wrong Password\");\r\n      }\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        console.log(\"Error\");\r\n        throw new Error(\"Please Check your Credentials !\");\r\n      }\r\n\r\n      return res.json();\r\n    })\r\n    .then((resData) => {\r\n      console.log(resData);\r\n      setauthLoading(false);\r\n      // (\"token\", resData.token);\r\n      setUserSession(resData.token, resData.userId);\r\n      const remaininiMillisecond = 60 * 60 * 100;\r\n      const expriyDate = new Date(new Date().getTime() + remaininiMillisecond);\r\n\r\n      props.history.push(\"/AdminPage\");\r\n\r\n      // history.push(\"/AdminPage\", token);\r\n    })\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      // console.log(err.response.statusText);\r\n      // console.log(err);\r\n      // alert(err.message);\r\n      setError(true);\r\n      setauthLoading(false);\r\n      setErrormessage(err.message);\r\n      openModel();\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}