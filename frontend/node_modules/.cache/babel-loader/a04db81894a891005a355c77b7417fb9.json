{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amank\\\\Desktop\\\\Real_Project_file\\\\ges\\\\src\\\\Components\\\\Text_Slider\\\\Slider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useInterval } from \"react-use\";\nimport styled, { keyframes } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Slider() {\n  _s();\n\n  const quote1 = \"This is good\".split();\n  const quote2 = \"Aman Khadka\".split();\n  const quote3 = \"Finally I'm learning programming\".split();\n  const [quotes, setQuotes] = useState(quote1);\n  const [count, setCount] = useState(0);\n  const [play, setPlay] = useState(false);\n  useInterval(() => {\n    //Animate Quotes\n    setQuotes(quote1);\n    setCount(count + 1); //Animate quote2, Looping\n\n    if (count === 1) {\n      setQuotes(quote2);\n      setCount(count + 1);\n    } //Animate quote3, Looping\n\n\n    if (count === 2) {\n      setCount(0);\n      setQuotes(quote3);\n    }\n  }, play ? 6000 : null);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      //Animate quote3 after timeout\n      setQuotes(quote3);\n      setPlay(true);\n    }, 4000);\n    return () => clearTimeout(timer);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: quotes.map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Slider, \"bw2Ri4luc01U+2VO0P2xrgWv8FU=\", false, function () {\n  return [useInterval];\n});\n\n_c = Slider;\nexport default Slider;\nconst animation = keyframes`\n0%{ opacity: 0; transform: translateX(-100px)}\n25%{opacity:1; transform: translateX(0px)}\n75%{opacity:1; transform:translateX(0px)}\n100%{opacity: 0; transform: translateX(100px)}\n`;\nconst Wrapper = styled.div`\n  display: inline-block;\n  span {\n    display: inline-block;\n    opacity: 0;\n    animation-name: ${animation};\n    animation-duration: 6s;\n    animation-fill-mode: forwards;\n    animation-iteration-count: infinite;\n  }\n`;\n_c2 = Wrapper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Slider\");\n$RefreshReg$(_c2, \"Wrapper\");","map":{"version":3,"sources":["C:/Users/amank/Desktop/Real_Project_file/ges/src/Components/Text_Slider/Slider.js"],"names":["React","useState","useEffect","useInterval","styled","keyframes","Slider","quote1","split","quote2","quote3","quotes","setQuotes","count","setCount","play","setPlay","timer","setTimeout","clearTimeout","map","item","index","animation","Wrapper","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,MAAP,IAAiBC,SAAjB,QAAkC,mBAAlC;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAMC,MAAM,GAAG,eAAeC,KAAf,EAAf;AACA,QAAMC,MAAM,GAAG,cAAcD,KAAd,EAAf;AACA,QAAME,MAAM,GAAG,mCAAmCF,KAAnC,EAAf;AAEA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAACM,MAAD,CAApC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,KAAD,CAAhC;AAEAE,EAAAA,WAAW,CACT,MAAM;AACJ;AACAS,IAAAA,SAAS,CAACL,MAAD,CAAT;AACAO,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR,CAHI,CAKJ;;AACA,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACfD,MAAAA,SAAS,CAACH,MAAD,CAAT;AACAK,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD,KATG,CAWJ;;;AACA,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACfC,MAAAA,QAAQ,CAAC,CAAD,CAAR;AACAF,MAAAA,SAAS,CAACF,MAAD,CAAT;AACD;AACF,GAjBQ,EAkBTK,IAAI,GAAG,IAAH,GAAU,IAlBL,CAAX;AAqBAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC7B;AACAN,MAAAA,SAAS,CAACF,MAAD,CAAT;AACAM,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAJuB,EAIrB,IAJqB,CAAxB;AAKA,WAAO,MAAMG,YAAY,CAACF,KAAD,CAAzB;AACD,GAPQ,EAON,EAPM,CAAT;AASA,sBACE;AAAA,2BACE,QAAC,OAAD;AAAA,gBACGN,MAAM,CAACS,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,kBACV;AAAA,kBAAmBD;AAAnB,SAAWC,KAAX;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAhDQhB,M;UASPH,W;;;KATOG,M;AAkDT,eAAeA,MAAf;AAEA,MAAMiB,SAAS,GAAGlB,SAAU;AAC5B;AACA;AACA;AACA;AACA,CALA;AAOA,MAAMmB,OAAO,GAAGpB,MAAM,CAACqB,GAAI;AAC3B;AACA;AACA;AACA;AACA,sBAAsBF,SAAU;AAChC;AACA;AACA;AACA;AACA,CAVA;MAAMC,O","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useInterval } from \"react-use\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nfunction Slider() {\r\n  const quote1 = \"This is good\".split();\r\n  const quote2 = \"Aman Khadka\".split();\r\n  const quote3 = \"Finally I'm learning programming\".split();\r\n\r\n  const [quotes, setQuotes] = useState(quote1);\r\n  const [count, setCount] = useState(0);\r\n  const [play, setPlay] = useState(false);\r\n\r\n  useInterval(\r\n    () => {\r\n      //Animate Quotes\r\n      setQuotes(quote1);\r\n      setCount(count + 1);\r\n\r\n      //Animate quote2, Looping\r\n      if (count === 1) {\r\n        setQuotes(quote2);\r\n        setCount(count + 1);\r\n      }\r\n\r\n      //Animate quote3, Looping\r\n      if (count === 2) {\r\n        setCount(0);\r\n        setQuotes(quote3);\r\n      }\r\n    },\r\n    play ? 6000 : null\r\n  );\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      //Animate quote3 after timeout\r\n      setQuotes(quote3);\r\n      setPlay(true);\r\n    }, 4000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Wrapper>\r\n        {quotes.map((item, index) => (\r\n          <span key={index}>{item}</span>\r\n        ))}\r\n      </Wrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Slider;\r\n\r\nconst animation = keyframes`\r\n0%{ opacity: 0; transform: translateX(-100px)}\r\n25%{opacity:1; transform: translateX(0px)}\r\n75%{opacity:1; transform:translateX(0px)}\r\n100%{opacity: 0; transform: translateX(100px)}\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: inline-block;\r\n  span {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation-name: ${animation};\r\n    animation-duration: 6s;\r\n    animation-fill-mode: forwards;\r\n    animation-iteration-count: infinite;\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}